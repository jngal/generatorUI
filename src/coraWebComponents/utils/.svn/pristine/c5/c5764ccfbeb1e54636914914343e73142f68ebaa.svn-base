import React from 'react';

import { IntlProvider, load, LocalizationProvider, loadMessages } from '@progress/kendo-react-intl';
import likelySubtags from 'cldr-data/supplemental/likelySubtags.json';
import currencyData from 'cldr-data/supplemental/currencyData.json';
import weekData from 'cldr-data/supplemental/weekData.json';

import numbers from 'cldr-data/main/sk/numbers.json';
import currencies from 'cldr-data/main/sk/currencies.json';
import caGregorian from 'cldr-data/main/sk/ca-gregorian.json';
import dateFields from 'cldr-data/main/sk/dateFields.json';
import timeZoneNames from 'cldr-data/main/sk/timeZoneNames.json';
import _ from 'lodash';

import sk from './sk.json';
import en from './en.json';
load(likelySubtags, currencyData, weekData, numbers, currencies, caGregorian, dateFields, timeZoneNames);
loadMessages(sk, 'sk-SK');

const Context = React.createContext();

class LocalizationProviderWrapper extends React.Component {
  constructor(props) {
    super(props);

    this.locales = {
      'en-US': { ...en, ...this.props.en },
      'sk-SK': { ...sk, ...this.props.sk }
    };

    this.state = {
      locale: this.props.locale || 'sk-SK'
    };
  }

  translate = locale => key => {
    return _.get(this.locales[locale], key);
  }

  translateWithLocale = (locale, key) => {
    return this.translate(locale)(key);
  }

  render() {
    return (
      <LocalizationProvider language={this.state.locale}>
        <IntlProvider locale={this.state.locale.split('-').shift()}>
          <Context.Provider
            value={{
              locale: this.state.locale,
              translate: this.translate(this.state.locale),
              translateWithLocale: this.translateWithLocale
            }}
          >
            {this.props.children}
          </Context.Provider>
        </IntlProvider>
      </LocalizationProvider>
    );
  }
}

export const withLocalizationConsumer = (WrappedComponent) => {
  return (props) => {
    return (
      <Context.Consumer>
        {x =>
          <WrappedComponent
            {...props}
            {...x}
          />
        }
      </Context.Consumer>
    );
  }
};

export default LocalizationProviderWrapper;