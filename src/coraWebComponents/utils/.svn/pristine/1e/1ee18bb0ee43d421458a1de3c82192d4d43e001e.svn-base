import _ from 'lodash';

/** @module utils/helper */

/**
 * Checks if input string is null or empty.
 * e.g., '' -> true
 * @function stringIsNullOrEmpty
 * @param {string} string string input
 * @returns {boolean}
 */
export const stringIsNullOrEmpty = (string) => {
    return (!string || string.length === 0 || !string.trim() || /^\s*$/.test(string));
}

/**
 * Returns url as string which is corrected by set theme.
 * @function buildUrl
 * @param {string} name url
 * @returns {(string|void)}
 */
export const buildUrl = (name) => {
  const theme = document.body.className;
  if(name){
    switch(theme){
      case 'theme-dark':
        name = name.replace(".svg", "-dark.svg");
        break;
        case 'theme-pink':
        name = name.replace(".svg", "-pink.svg");
        break;
        case 'theme-underwater':
        name = name.replace(".svg", "-underwater.svg");
        break;
        case 'theme-army':
        name = name.replace(".svg", "-army.svg");
        break;
        default:
          return name;
    }
    return name;
  }
}

/**
 * Returns Google OAuth url
 * @function buildGoogleOauthUrl
 * @param {string} redirectURI - Redirect url
 * @param {string} state - State
 * @returns {string}
 */
export const buildGoogleOauthUrl = (redirectURI, state) => {
  return `https://accounts.google.com/o/oauth2/v2/auth?scope=https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email&response_type=code&redirect_uri=${redirectURI}&client_id=${window.config.google.id}${state !== undefined ? `&state=${state}` : ''}`;
}

/**
 * Returns version of client as string.
 * @function getClientVersion
 * @returns {string}
 */
export const getClientVersion = () => {
  return process.env.REACT_APP_VERSION.substring(0, 4) + '.' + process.env.REACT_APP_VERSION.substring(4);
}

/**
 * Executes every function in child elements.
 * @function eachDeep
 * @param {Array} columns array object
 * @param {Object} parent parent object
 * @param {Function} fn function to be executed
 */
export var eachDeep = (columns, parent, fn) => {
  if (!_.isArray(columns)) return;
  columns.forEach(item => {
    eachDeep(item.schema, item, fn);
    fn(item, parent);  
  });
}

/**
 * Copy string to clipboard.
 * @function copyToClipboard
 * @param {string} data string input
 */
export var copyToClipboard = (data) => {
  var actEl = document.activeElement;
  var el = document.createElement("textarea");
  el.value = data;
  document.body.appendChild(el);
  el.select();
  document.execCommand("copy");
  document.body.removeChild(el);
  actEl.focus();
}

/**
 * Replaces diacritical mark letters in input string with letters without diacritical mark.
 * @function removeAccents
 * @param {string} str string input
 * @returns {string}
 */
export var removeAccents = (str) => {
  var accents = 'ÁÄáäÓÔóôÉéČčĎďÍíÚúŇňŠšÝýŽžĹĽĺľŕŤť';
  var accentsOut = "AAaaOOooEeCcDdIiUuNnSsYyZzLLllrTt";
  str = str.split('');
  var strLen = str.length;
  var i, x;
  for (i = 0; i < strLen; i++) {
      if ((x = accents.indexOf(str[i])) !== -1) {
          str[i] = accentsOut[x];
      }
  }
  return str.join('');
}

/**
 * Returns new filter for input object.
 * @function buildFilter
 * @param {Object} input input object schema
 * @param {Array} schema
 * @returns {Object}
 */
export const buildFilter = (input, schema) => {
  let newFilter = []
  for (let [key, value] of Object.entries(input)) {
    if (value || value === false) {
      let oldItem = newFilter.find(item => item.field + 'Value' === key || item.field + 'Operator' === key);
      if (oldItem) {
        oldItem.field + 'Operator' === key ? oldItem.operator = value : oldItem.value = value
        newFilter = [...newFilter]
      }
      else {
        let newFilterItem
        if (key.search("Value") !== -1) {
          newFilterItem = {
            field: key.replace('Value', ''),
            operator: schema.find(item => item.field === (key.replace('Value', '')).filter) ? 'eq' : 'contains',
            value: value
          }
        }
        else {
          newFilterItem = {
            field: key.replace('Operator', ''),
            operator: value,
            value: null
          }
        }
        newFilter = [...newFilter, newFilterItem]
      }
    }
  }
  newFilter = {
    logic: "and",
    filters: [
      ...newFilter,
    ]
  }
  return newFilter;
}

/**
 * Returns boolean that determines whether the email is valid. 
 * @function validEmail
 * @param {string} email string input which is going to be validated
 * @returns {boolean}
 */
export const validEmail = (email) => { return /\S+@\S+\.\S+/.test(email); }

/**
 * Adds target route to route history.
 * @function onMenuSelect
 * @param {string} targetRoute target of route
 * @param {string} currLocation current location
 * @param {Array} routeHistory history of route
 */
export const onMenuSelect = (targetRoute, currLocation, routeHistory) => {
  if (targetRoute === undefined || currLocation === undefined)
    return;

  if (currLocation !== targetRoute)
    routeHistory.push(targetRoute);
}

/**
 * Returns object of url params from string. 
 * @function getURLParams
 * @param {string} params string url params.
 * @returns {boolean}
 */
export const getURLParams = (params) => {
  const urlParamsPart = window.location.href.split('?')[1];
  if (urlParamsPart === undefined)
      return [];

  let URLParams = [];
  params.forEach(param => {
    if (urlParamsPart.includes(`${param}=`)) {
      const urlParam = urlParamsPart.split('&').find(up => up.includes(`${param}=`));
      if (urlParam !== null)
        URLParams.push(urlParam);
    }
  });

  return URLParams;
}
