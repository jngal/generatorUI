import React from 'react';

import { IntlProvider, load, LocalizationProvider, loadMessages } from '@progress/kendo-react-intl';
import likelySubtags from 'cldr-data/supplemental/likelySubtags.json';
import currencyData from 'cldr-data/supplemental/currencyData.json';
import weekData from 'cldr-data/supplemental/weekData.json';

import numbers from 'cldr-data/main/sk/numbers.json';
import currencies from 'cldr-data/main/sk/currencies.json';
import caGregorian from 'cldr-data/main/sk/ca-gregorian.json';
import dateFields from 'cldr-data/main/sk/dateFields.json';
import timeZoneNames from 'cldr-data/main/sk/timeZoneNames.json';
import _ from 'lodash';

import sk from './sk.json';
import en from './en.json';
load(likelySubtags, currencyData, weekData, numbers, currencies, caGregorian, dateFields, timeZoneNames);
loadMessages(sk, 'sk-SK');

const Context = React.createContext();

/**
 * Returns wrapped component with Slovak localization
 * @module
 * @param {Object} params - localization parametees
 * @param {element} WrappedComponent - Wrapped component
 */
export const withLocalizationProvider = (params) => (WrappedComponent) => {
  class HOC extends React.Component {
    constructor(props) {
      super(props);

      this.locales = {
        'en-US': { ...en, ...params.en},
        'sk-SK': { ...sk, ...params.sk }
      };

      this.state = {
        locale: params.locale || 'sk-SK'
      };
    }

    translate = locale => key => {
      return _.get(this.locales[locale], key);
    }


    render() {
      return (
        <LocalizationProvider language={this.state.locale}>
          <IntlProvider locale={this.state.locale.split('-').shift()}>
            <Context.Provider
              value={{
                locale: this.state.locale,
                translate: this.translate(this.state.locale)
              }}
            >
              <WrappedComponent
                {...this.props}
              />
            </Context.Provider>
          </IntlProvider>
        </LocalizationProvider>
      );
    }
  }

  return HOC;
};

export const withLocalizationConsumer = (WrappedComponent) => {
  return (props) => {
    return (
      <Context.Consumer>
        {x =>
          <WrappedComponent
            {...props}
            {...x}
          />
        }
      </Context.Consumer>
    );
  }
};

export default withLocalizationProvider;