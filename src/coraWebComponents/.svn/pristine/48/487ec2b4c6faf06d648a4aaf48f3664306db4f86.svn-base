<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: forms/Picker.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: forms/Picker.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import React from 'react';
import PropTypes from 'prop-types';
import { Button } from '@progress/kendo-react-buttons';
import AutoComplete from './Autocomplete';
import Grid from '../grid/Grid';
import Dialog from '../dialogs/Dialog';
import _ from 'lodash';
import Tabs from '../TabsWrapper';
import Tab from '../Tab';
import eventEmitter from '../utils/eventEmitter';
import flags from '../utils/flags';
import './Picker.scss';

const buildFilter = (selected, textField) => {
  if(!selected) {
    return {
      filters: []
    };
  }

  return {
    logic: 'and',
    filters: [
      { 
        field: textField, 
        operator: "contains", 
        value: _.get(selected, textField.split('.'))
      }
    ]
  }
}

let _flag;

/**
 * Picker component
 * @module
 * @param {string} name - Name
 * @param {string} title - Picker title
 * @param {string} textField - Text field
 * @param {func} onChange - Function invoked on value change
 * @param {func} [onSubmit] - Function invoked on sumbit
 * @param {array} data - All data for picker
 * @param {bool} isLoading - Loading
 * @param {func} onSelect - Function invoked on item select
 * @param {object} [selected] - Current selected item
 * @param {number} total - Total number of items
 * @param {array} schema - Schema for picker
 * @param {bool} [required] - Is picker required?
 * @param {bool} [disabled] - Is picker readonly?
 * @param {string} [validationMessage] - Validation message if field is invalid
 * @param {string} [primaryField] - Primary field
 * @param {func} [onOpened] - Function invoked on picker open
 * @param {object} [initFilter] - Filter, can be canceled
 * @param {object} [fixedFilter] - Filter, can't be canceled
 * @param {bool} [autofocus] - Should picker be focused?
 * @param {string} [placeholder] - Picker placeholder
 * @param {any} [detail] - Detail, create new record (null = without this function)
 * @param {func} [onAdd] - Function invoked on add entry
 * @param {number} [tabIndex] - Picker tab index
 * @param {bool} [isOpen] - Is picker open?
 * @param {func} [openPicker] - Function invoked on picker open
 * @param {func} [closePicker] - Function invoked on picker close
 */

class PickerComponent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      isOpen: false,
      filter: props.initFilter || {filters:[]},
      selected: null
    }
  }

  handleOpen = (event) => {
    event.preventDefault();
    this.setState({isOpen: true});
    if(this.props.openPicker !== undefined) {
      this.props.openPicker();
    }

    if(this.props.onOpened)
      this.props.onOpened();
  }

  handleClose = () => {
    _flag = false;
    if(this.props.closePicker !== undefined) {
      this.props.closePicker();
    }
    this.setState({isOpen: false});
  }

  handleFilter = (filter) => {
    this.setState({filter});
  }

  handleSelect = selected => {
    _flag = true;
    this.setState({selected: selected[0]});
  }

  handleConfirm = async () => {
    _flag = false
    const { selected } = this.state;
    const filter = buildFilter(selected, this.props.textField);
    this.setState({isOpen: false, filter});
    await this.props.onSelect(this.props.name, selected);
    this.handleBlur();
  }

  handleSelectAndConfirm = async selected => {
    this.setState({selected});
    await this.props.onSelect(this.props.name, selected);
    this.dataCheck();
    this.handleBlur();
  }

  processFilter = (filter) => {
    let processedFilter = filter;
    if(this.props.fixedFilter) {
      processedFilter = {filters: [...filter.filters, ...this.props.fixedFilter.filters]};
    }
    return processedFilter;
  }

  applyFilter = (id) => {
    this.props.onChange({filters: [{field: this.props.primaryField, operator: "eq", value: id}]}, [], {skip:0, take:1});
    this.handleFilter({filters: [{field: this.props.primaryField, operator: "eq", value: id}]});
    if(this.props.onSubmit){
      this.props.onSubmit();
    }
    eventEmitter.changeTab(this.props.primaryField, 0);
  }

  onChange = (filter, sort, page) => {
    if(filter){
      this.props.onChange(this.processFilter(filter), sort, page, this.props.primaryField);
    }
    else {
      let page = sessionStorage.Page ? JSON.parse(sessionStorage.Page) : [0,5];
      this.props.onChange(this.processFilter(this.state.filter), "", page, this.props.primaryField);
      eventEmitter.changeTab(this.props.primaryField, 0);
    }
  }

  static getDerivedStateFromProps(props, state) {
    const { selected } = props;
    
    if(_flag || selected === state.selected) {
      return null;
    }

    const filter = buildFilter(selected, props.textField);
    return { filter, selected };
  }

  handleBlur = () => {
    this.dataCheck();
    if(this.props.onBlur) {
      this.props.onBlur();
    }
  }

  dataCheck = () => {
    if(!this.props.selected || Object.keys(this.props.selected).length === 0){
      this.setState({ selected: null })
    }
  }

  onAdd = async () => {
    if(this.props.onAdd){
      await this.props.onAdd();
    }
    eventEmitter.changeTab(this.props.primaryField, 1);
  }

  render() {
    return (
      &lt;div className="picker">
        &lt;AutoComplete
          textField={this.props.textField}
          valueField={this.props.valueField}
          primaryField={this.props.primaryField}
          selected={this.props.selected}
          onChange={this.onChange}
          data={this.props.data}
          isLoading={this.props.isLoading}
          onSelect={this.handleSelectAndConfirm}
          onBlur={this.handleBlur}
          filter={this.state.filter}
          onFilter={this.handleFilter}
          required={this.props.required}
          disabled={this.props.disabled}
          validationMessage={this.props.validationMessage}
          autofocus={this.props.autofocus}
          placeholder={this.props.placeholder}
          tabIndex={this.props.tabIndex}
        />
        &lt;Button 
          type="button"
          onClick={this.handleOpen}
          icon="more-vertical" 
          disabled={this.props.disabled}
        />
        &lt;Dialog 
          isOpen={this.props.isOpen || this.state.isOpen}
          title={this.props.title}
          onClose={this.handleClose}
          onConfirm={this.handleConfirm}
          confirmDisabled={!this.state.selected}
        >
          {this.props.detail ?
          &lt;Tabs name={this.props.primaryField}>
            &lt;Tab title="Zoznam">
              &lt;Grid 
                total={this.props.total}
                data={this.props.data}
                isLoading={this.props.isLoading}
                onChange={this.onChange}
                schema={this.props.schema}
                toolbarHidden={false}
                filter={this.state.filter}
                onFilter={this.handleFilter}
                onSelect={this.handleSelect}
                primaryField={this.props.primaryField}
                onConfirm={this.handleConfirm}
                onAdd={this.onAdd}
                isPicker
                currentDataItem={this.props.currentDataItem}
                hidden={flags.PRINT | flags.RESET | flags.EDITCELL}
              />
            &lt;/Tab>
            &lt;Tab title="Detail">
              {React.cloneElement(this.props.detail, { isPicker: true, onSubmit: () => { return null; }, applyFilter: this.applyFilter })}
            &lt;/Tab>
          &lt;/Tabs> 
          :
          &lt;Grid 
            total={this.props.total}
            data={this.props.data}
            isLoading={this.props.isLoading}
            onChange={this.onChange}
            schema={this.props.schema}
            toolbarHidden={true}
            filter={this.state.filter}
            onFilter={this.handleFilter}
            onSelect={this.handleSelect}
            primaryField={this.props.primaryField}
            onConfirm={this.handleConfirm}
            isPicker
            currentDataItem={this.props.currentDataItem} 
            hidden={flags.PRINT | flags.RESET | flags.LEFT_TOOLBAR | flags.EDITCELL}
          />
          }
        &lt;/Dialog>
      &lt;/div>
    );
  }
}

PickerComponent.propTypes = {
  name: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  textField: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  onSubmit: PropTypes.func,
  data: PropTypes.array.isRequired,
  isLoading: PropTypes.bool.isRequired,
  onSelect: PropTypes.func.isRequired,
  selected: PropTypes.object,
  total: PropTypes.number.isRequired,
  schema: PropTypes.array.isRequired,
  required: PropTypes.bool,
  disabled: PropTypes.bool,
  validationMessage: PropTypes.string,
  primaryField: PropTypes.string,
  onOpened: PropTypes.func,
  //initFilter - filter, ktorý je clear-nuteľný
  initFilter: PropTypes.object,
  //fixedFilter - filter, ktorý nie je možné odstrániť
  fixedFilter: PropTypes.object,
  autofocus: PropTypes.bool,
  placeholder: PropTypes.string,
  
  //Vytvorenie nového záznamu v pickeri (null = bez tejto možnosti)
  detail: PropTypes.any,
  onAdd: PropTypes.func,
  tabIndex: PropTypes.number,
  isOpen: PropTypes.bool,
  openPicker: PropTypes.func,
  closePicker: PropTypes.func
}

export default PickerComponent;</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-Alert.html">Alert</a></li><li><a href="module-animation_Slide.html">animation/Slide</a></li><li><a href="module-buttons_Button.html">buttons/Button</a></li><li><a href="module-buttons_ButtonGroup.html">buttons/ButtonGroup</a></li><li><a href="module-buttons_DropDownButton.html">buttons/DropDownButton</a></li><li><a href="module-buttons_SplitButton.html">buttons/SplitButton</a></li><li><a href="module-ChangePassword.html">ChangePassword</a></li><li><a href="module-chart_ChartComponent.html">chart/ChartComponent</a></li><li><a href="module-chart_elements_ChartCategoryAxisComponent.html">chart/elements/ChartCategoryAxisComponent</a></li><li><a href="module-chart_elements_ChartLegendComponent.html">chart/elements/ChartLegendComponent</a></li><li><a href="module-chart_elements_ChartSeriesComponent.html">chart/elements/ChartSeriesComponent</a></li><li><a href="module-chart_elements_ChartTitleComponent.html">chart/elements/ChartTitleComponent</a></li><li><a href="module-Container.html">Container</a></li><li><a href="module-detail_Detail.html">detail/Detail</a></li><li><a href="module-detail_DetailWrapper.html">detail/DetailWrapper</a></li><li><a href="module-detail_Toolbar.html">detail/Toolbar</a></li><li><a href="module-detail_ValidationMessage.html">detail/ValidationMessage</a></li><li><a href="module-dialogs_ConfirmDialog.html">dialogs/ConfirmDialog</a></li><li><a href="module-dialogs_Dialog.html">dialogs/Dialog</a></li><li><a href="module-dialogs_DialogContent.html">dialogs/DialogContent</a></li><li><a href="module-dialogs_EmailPrompt.html">dialogs/EmailPrompt</a></li><li><a href="module-dialogs_FileContent.html">dialogs/FileContent</a></li><li><a href="module-dialogs_FileDialog.html">dialogs/FileDialog</a></li><li><a href="module-dialogs_ReportDialog.html">dialogs/ReportDialog</a></li><li><a href="module-Dropdown.html">Dropdown</a></li><li><a href="module-forms_Autocomplete.html">forms/Autocomplete</a></li><li><a href="module-forms_AutocompleteLocal.html">forms/AutocompleteLocal</a></li><li><a href="module-forms_Checkbox.html">forms/Checkbox</a></li><li><a href="module-forms_DatePicker.html">forms/DatePicker</a></li><li><a href="module-forms_DateRangePicker.html">forms/DateRangePicker</a></li><li><a href="module-forms_DateTimePicker.html">forms/DateTimePicker</a></li><li><a href="module-forms_DropDownList.html">forms/DropDownList</a></li><li><a href="module-forms_Input.html">forms/Input</a></li><li><a href="module-forms_MultiSelect.html">forms/MultiSelect</a></li><li><a href="module-forms_NumericTextBox.html">forms/NumericTextBox</a></li><li><a href="module-forms_Picker.html">forms/Picker</a></li><li><a href="module-forms_Switch.html">forms/Switch</a></li><li><a href="module-forms_Textarea.html">forms/Textarea</a></li><li><a href="module-forms_TimePicker.html">forms/TimePicker</a></li><li><a href="module-forms_Upload.html">forms/Upload</a></li><li><a href="module-graph_ArcGauage.html">graph/ArcGauage</a></li><li><a href="module-grid_Cell.html">grid/Cell</a></li><li><a href="module-grid_ColumnMenu.html">grid/ColumnMenu</a></li><li><a href="module-grid_DialogFilter.html">grid/DialogFilter</a></li><li><a href="module-grid_DialogFilterForm.html">grid/DialogFilterForm</a></li><li><a href="module-grid_DropdownFilterCell.html">grid/DropdownFilterCell</a></li><li><a href="module-grid_EditBooleanCell.html">grid/EditBooleanCell</a></li><li><a href="module-grid_EditCommandCell.html">grid/EditCommandCell</a></li><li><a href="module-grid_EditDateTimeCell.html">grid/EditDateTimeCell</a></li><li><a href="module-grid_EditDropdownCell.html">grid/EditDropdownCell</a></li><li><a href="module-grid_EditPickerCell.html">grid/EditPickerCell</a></li><li><a href="module-grid_EditTimeCell.html">grid/EditTimeCell</a></li><li><a href="module-grid_FileCell.html">grid/FileCell</a></li><li><a href="module-grid_Grid.html">grid/Grid</a></li><li><a href="module-grid_GridWrapper.html">grid/GridWrapper</a></li><li><a href="module-grid_RangeFilterCell.html">grid/RangeFilterCell</a></li><li><a href="module-grid_SaveFilterDialog.html">grid/SaveFilterDialog</a></li><li><a href="module-grid_SelectionMenu.html">grid/SelectionMenu</a></li><li><a href="module-grid_Toolbar.html">grid/Toolbar</a></li><li><a href="module-grid_TooltipCell.html">grid/TooltipCell</a></li><li><a href="module-LoadingPanel.html">LoadingPanel</a></li><li><a href="module-metabase_Dashboard.html">metabase/Dashboard</a></li><li><a href="module-navigation_Hamburger.html">navigation/Hamburger</a></li><li><a href="module-navigation_Manual.html">navigation/Manual</a></li><li><a href="module-navigation_ManualDialogList.html">navigation/ManualDialogList</a></li><li><a href="module-navigation_ManualList.html">navigation/ManualList</a></li><li><a href="module-navigation_ManualPDF.html">navigation/ManualPDF</a></li><li><a href="module-navigation_ManualWrapper.html">navigation/ManualWrapper</a></li><li><a href="module-navigation_Navigation.html">navigation/Navigation</a></li><li><a href="module-navigation_Search.html">navigation/Search</a></li><li><a href="module-navigation_User.html">navigation/User</a></li><li><a href="module-RefreshDialog.html">RefreshDialog</a></li><li><a href="module-sch_ApprovalProcessStep.html">sch/ApprovalProcessStep</a></li><li><a href="module-sch_ApprovalProcessTimeline.html">sch/ApprovalProcessTimeline</a></li><li><a href="module-scheduler_Scheduler.html">scheduler/Scheduler</a></li><li><a href="module-Settings.html">Settings</a></li><li><a href="module-sidebar_Appmenu.html">sidebar/Appmenu</a></li><li><a href="module-sidebar_Footer.html">sidebar/Footer</a></li><li><a href="module-sidebar_header_Appmenu.html">sidebar/header/Appmenu</a></li><li><a href="module-sidebar_header_Header.html">sidebar/header/Header</a></li><li><a href="module-sidebar_header_SidebarToggle.html">sidebar/header/SidebarToggle</a></li><li><a href="module-sidebar_menu_Menu.html">sidebar/menu/Menu</a></li><li><a href="module-sidebar_menu_Search.html">sidebar/menu/Search</a></li><li><a href="module-sidebar_Sidebar.html">sidebar/Sidebar</a></li><li><a href="module-sidebar_Stats.html">sidebar/Stats</a></li><li><a href="module-Tab.html">Tab</a></li><li><a href="module-Tabs.html">Tabs</a></li><li><a href="module-TabsWrapper.html">TabsWrapper</a></li><li><a href="module-TitlePanel.html">TitlePanel</a></li><li><a href="module-utils_convert.html">utils/convert</a></li><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter.html">utils/eventEmitter</a></li><li><a href="module-utils_flags.html">utils/flags</a></li><li><a href="module-utils_helper.html">utils/helper</a></li><li><a href="module-utils_logger.html">utils/logger</a></li><li><a href="module-utils_requests.html">utils/requests</a></li><li><a href="module-utils_storage.html">utils/storage</a></li><li><a href="module-ValidationAlert.html">ValidationAlert</a></li><li><a href="module-views_login_Login.html">views/login/Login</a></li><li><a href="module-views_registration_Registration.html">views/registration/Registration</a></li></ul><h3>Classes</h3><ul><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter-ExtendedEventEmitter.html">ExtendedEventEmitter</a></li></ul><h3>Global</h3><ul><li><a href="global.html#getPreprocessedMenuData-zkorenamenuvyrobinovudatovustrukturumenupouzitelnunavykreslenie">getPreprocessedMenuData - z korena menu vyrobi novu datovu strukturu menu pouzitelnu na vykreslenie</a></li><li><a href="global.html#isValidDateStr">isValidDateStr</a></li><li><a href="global.html#isValidEcv">isValidEcv</a></li><li><a href="global.html#isValidID">isValidID</a></li><li><a href="global.html#isValidMail">isValidMail</a></li><li><a href="global.html#isValidPasswordStrong">isValidPasswordStrong</a></li><li><a href="global.html#isValidPhone">isValidPhone</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.6</a> on Thu Jan 07 2021 13:35:30 GMT+0100 (GMT+01:00)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
