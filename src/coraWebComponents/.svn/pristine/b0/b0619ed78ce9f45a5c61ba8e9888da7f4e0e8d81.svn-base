import * as React from "react";
import PropTypes from "prop-types";
import Input from "../../forms/Input";
import Switch from "../../forms/Switch";
import Button from "../../buttons/Button";
import withRouter from "../../utils/withRouter";
import LoadingPanel from "../../LoadingPanel";
import "./Login.scss";
import {
  getClientVersion,
  afterLoginHandle,
  getURLParamsByNames,
} from "../../utils/helper";

const USERNAME_KEY = "username";

/**
 * Login component
 * @module
 * @param {object} [user] - User
 * @param {bool} isLoading - Is loading?
 * @param {element} header - Header element
 * @param {bool} [rememberDisabled] - Remember disabled
 * @param {func} signIn - Sign in function
 * @param {func} [verifyCode] - Verify code function
 * @param {func} [createCode] - Create code function
 * @param {object} [afterLoginlocation] - After login location
 * @param {string} [userNameLabel] - User name label, "Prihlasovacie meno" if not provided
 * @param {string} [passwordLabel] - Password label, "Heslo" if not provided
 */
class Login extends React.Component {
  constructor(props) {
    super(props);

    const username = props.rememberDisabled
      ? ""
      : localStorage.getItem(USERNAME_KEY);
    const { guid, code, provider } = getURLParamsByNames([
      "guid",
      "code",
      "provider",
    ]);

    this.state = {
      username: username || "",
      password: "",
      remember: username !== null,
      guid,
      code,
      provider,
    };
  }

  handleChange = (name, value) => {
    this.setState({ [name]: value });
  };

  async componentDidMount() {
    const { guid, code, provider } = this.state;
    const { verifyCode, verifyGUID, oAuthLogin, history } = this.props;

    if (code || provider || guid) {
      if (code && provider) {
        await oAuthLogin(this.props, code, provider);

        if (this.props.user !== null) return;
      } else if (code) await verifyCode(code);
      else if (guid) await verifyGUID(guid);

      history.replace("/");
    }
  }

  render() {
    const { code } = this.state;
    const { children } = this.props;

    return (
      <div className="row m-0">
        <div className="col-4 offset-4 p-0">
          <div className="card login">
            <div className="card-body">
              <div className="card-title">
                <div>{this.props.header}</div>
                <div style={{ float: "right", fontSize: 12, paddingRight: 16 }}>
                  {getClientVersion()}
                </div>
              </div>
              {!code && (
                <form className="k-form" onSubmit={this.handleSubmit}>
                  <div className="k-form-field">
                    <span>
                      {this.props.userNameLabel || "Prihlasovacie meno"}
                    </span>
                    <Input
                      name="username"
                      required={true}
                      onChange={this.handleChange}
                      value={this.state.username}
                    />
                  </div>
                  <div className="k-form-field">
                    <span>{this.props.passwordLabel || "Heslo"}</span>
                    <Input
                      type="password"
                      name="password"
                      onChange={this.handleChange}
                      value={this.state.password}
                    />
                  </div>

                  {(!this.props.rememberDisabled ||
                    this.props.showForgotPassword) && (
                    <div className="row">
                      {!this.props.rememberDisabled && (
                        <div className="k-form-field form-boolean col-6">
                          <span className="title">Zapamätaj si ma</span>
                          <Switch
                            name="remember"
                            onChange={this.handleChange}
                            value={this.state.remember}
                          />
                        </div>
                      )}
                      {this.props.showForgotPassword && (
                        <div className="k-form-field col-6">
                          <a
                            className="forgotPassword"
                            href={`#${this.props.routeForgotPassword}`}
                          >
                            Zabudli ste heslo?
                          </a>
                        </div>
                      )}
                    </div>
                  )}

                  <Button
                    primary={true}
                    disabled={this.props.isLoading}
                    label="Prihlásiť"
                    type="submit"
                  />
                  {this.props.createCode && (
                    <Button
                      disabled={
                        this.props.isLoading ||
                        this.state.username === null ||
                        this.state.username === ""
                      }
                      label="Zabudnuté heslo"
                      onClick={this.handleCreateCode}
                    />
                  )}
                  {children}
                </form>
              )}
              <LoadingPanel isLoading={this.props.isLoading} />
            </div>
          </div>
        </div>
      </div>
    );
  }

  handleCreateCode = async () => {
    const username = this.state.username.trim();
    await this.props.createCode(username);
    alert("Na Váš Email Vám bol odoslaný kód na jednorazové prihlásenie.");
  };

  handleSubmit = async (event) => {
    event.preventDefault();

    const username = this.state.username.trim();
    const password = this.state.password;

    await this.props.signIn(username, password);
    if (this.props.user !== null) {
      afterLoginHandle(this.props, this.state.remember ? username : "");
    }
  };
}

Login.propTypes = {
  user: PropTypes.object,
  isLoading: PropTypes.bool.isRequired,
  header: PropTypes.element.isRequired,
  rememberDisabled: PropTypes.bool,
  signIn: PropTypes.func.isRequired,
  verifyCode: PropTypes.func,
  verifyGUID: PropTypes.func,
  oAuthLogin: PropTypes.func,
  createCode: PropTypes.func,
  userNameLabel: PropTypes.string,
  passwordLabel: PropTypes.string,
  afterLoginlocation: PropTypes.object,
  showForgotPassword: PropTypes.bool,
  routeForgotPassword: PropTypes.string,
};

export default withRouter(Login);
