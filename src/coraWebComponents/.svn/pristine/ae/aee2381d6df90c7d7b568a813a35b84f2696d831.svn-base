<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: utils/requests.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: utils/requests.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import * as convert from './convert';
import * as storage from './storage';
import CoraError from './coraError';
import { getClientVersion } from './helper';

/** @module utils/requests */

/** @type {string} unauthorized message*/
export const UNAUTHORIZED_MSG = 'Vaše prihlásenie vypršalo.';


const checkVersion = (versionServer) => {
  const versionClient = getClientVersion();
  return process.env.NODE_ENV === 'development' || !versionServer || versionServer === versionClient;
}

/**
 * Asynchronously returns filename from response header content disposition.
 * @function parseFilenameFromContentDisposition
 * @param {string} contentDisposition 
 * @returns {(string | null)}
 */
export const parseFilenameFromContentDisposition = (contentDisposition) => {
  if (!contentDisposition) return null;
  let matches = /filename=(.*)/.exec(contentDisposition);

  return matches &amp;&amp; matches.length > 1 ? matches[1] : null;
}

/**
 * Asynchronously response from signing in.
 * @function signIn
 * @param {string} username username to sign in
 * @param {string} password password to sign in
 * @returns {Object}
 */
export const signIn = async (username, password) => {
  const url = '/api/Login';
  const data = {
    username,
    password
  }

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
  });


  const res = await response.json();
  if (response.status === 200) {
    if (!checkVersion(res.Data.Version)) {
      throw new CoraError({
        UserMessage: 'Je potrebné aktualizovať aplikáciu.',
        Code: '403.000'
      });
    }

    storage.setUser(res.Data);
    return res;
  }
  else if (response.status === 401) {
    throw new CoraError({
      UserMessage: res.UserMessage || 'Nesprávne meno alebo heslo.',
      Code: '401.000'
    });
  }
  else {
    throw new CoraError(await response.json());
  }
}

/**
 * Asynchronously response from register.
 * @function register
 * @param {Object} registerData data to register
 * @param {string} guid default null
 * @returns {Object}
 */
export const register = async (registerData, guid=null) => {
  const url = `/api/register/${guid !== null ? guid : ""}`;
  const data = registerData;

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: data ? JSON.stringify(data) : null,
  });


  if (response.status === 200) {
    const res = await response.json();
    return res;
  }
  else {
    throw new CoraError(await response.json());
  }
}

/**
 * Asynchronously response from oAuth register.
 * @function oAuthRegister
 * @param {string} code generated code from oAuth response
 * @param {string} redirect_uri redirect uri used in oAuth request
 * @param {string} provider provider ID
 * @returns {Object}
 */
export const oAuthRegister = async (code, redirect_uri, provider) => {
  const url = "/api/oauth";
  const data = {
    provider,
    code: decodeURIComponent(code),
    redirect_uri,
  };

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: data ? JSON.stringify(data) : null,
  });


  if (response.status === 200) {
    const res = await response.json();
    return res;
  }
  else {
    throw new CoraError(await response.json());
  }
}

/**
 * Asynchronously returns response from verifying code.
 * @function verifyCode
 * @param {string} code code to be verified
 * @returns {Object}
 */
export const verifyCode = async (code) => {
  const url = '/api/VerifyCode';
  const data = {
    code
  }

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
  });


  if (response.status === 200) {
    const res = await response.json();
    storage.setUser(res.Data);
    return res;
  }
  else {
    throw new CoraError(await response.json());
  }
}

/**
 * Asynchronously returns response from creating code.
 * @function createCode
 * @param {string} username username
 * @param {string} password password
 * @returns {Object}
 */
export const createCode = async (username, password) => {
  const url = '/api/CreateCode';
  const data = {
    username, password
  }

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
  });


  if (response.status === 200) {
    const res = await response.json();
    return res;
  }
  else {
    throw new CoraError(await response.json());
  }
}

export const refreshToken = async () => {
  const url = '/api/Login/refresh';
  const user = storage.getUser();
  if (!user) {
    return false;
  }

  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': user ? `Bearer ${user.RefreshToken}` : null
    },
  });

  if (response.status === 200) {
    const res = await response.json();
    if (!checkVersion(res.Data.Version)) {
      storage.removeUser();
      return false;
    }

    storage.setUser(res.Data);
    return true;
  }
  else {
    storage.removeUser();
    return false;
  }
}

export const post = async (url, data) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': getAuthorizationHeader()
    },
    body: JSON.stringify(data)
  });
  if (response.status === 200 || response.status === 201) {
    return await response.json();
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await post(url, data);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const put = async (url, data) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'PUT',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': getAuthorizationHeader()
    },
    body: JSON.stringify(data)
  });

  if (response.status === 200) {
    return await response.json()
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await put(url, data);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const getAuthorizationHeader = () => {
  const user = storage.getUser();
  return user ? `Bearer ${user.Token}` : null;
}

export const processFilter = filter => {
  if (filter.value instanceof Date) {
    filter.value = convert.addOffset(filter.value);
  }
  return filter;
}

export const getList = async (url, filter, sort, page) => {
  filter.filters.map(x => processFilter(x));
  let response = await fetch(`${window.config.url}${url}?filter=${JSON.stringify(filter)}&amp;sort=${JSON.stringify({ sorts: sort })}&amp;page=${(page.skip / page.take) + 1}&amp;limit=${page.take}`, {
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });

  if (response.status === 200) {
    return await response.json();
  }
  else if (response.status === 404) {
    return { Data: { Items: [], TotalRecords: page.skip } };
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await getList(url, filter, sort, page);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const get = async (url) => {
  let response = await fetch(`${window.config.url}${url}`, {
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });

  if (response.status === 200) {
    return await response.json();
  }
  else if(response.status === 404) {
    return { Data: null };
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await get(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const del = async (url) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'DELETE',
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });

  if (response.status === 204 || response.status === 200) {
    return;
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await del(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const delWithResData = async (url) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'DELETE',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': getAuthorizationHeader()
    }
  });

  if (response.status === 200) {
    return await response.json();
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await delWithResData(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const cancel = async (url) => {
  let response = await fetch(`${window.config.url}${url}/zrus`, {
    method: 'DELETE',
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });

  if (response.status === 200) {
    return;
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await cancel(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const delWithData = async (url, data) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'DELETE',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': getAuthorizationHeader()
    },
    body: JSON.stringify(data)
  });

  if (response.status === 200 || response.status === 201) {
    return await response.json();
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await delWithData(url, data);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const postPrint = async (url, filter, sort, fileType, schema) => {
  let response = await fetch(`${window.config.url}${url}?filter=${JSON.stringify(filter)}&amp;sort=${JSON.stringify({ sorts: sort })}&amp;fileType=${fileType}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': getAuthorizationHeader(),
      'Access-Control-Expose-Headers': 'Content-Disposition'
    },
    body: JSON.stringify(schema)
  });
  let fileName = parseFilenameFromContentDisposition(response.headers.get("content-disposition"));

  if (response.status === 200) {
    return { blob: await response.blob(), fileName: fileName };
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await postPrint(url, filter, sort, fileType, schema);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = { blob: await response.blob(), fileName: fileName };
    throw new CoraError(res);
  }
}

export const getBlob = async (url) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'GET',
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });
  if (response.status === 200) {
    return await response.blob();
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await getBlob(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}

export const getBlobWithFileName = async (url) => {
  let response = await fetch(`${window.config.url}${url}`, {
    method: 'GET',
    headers: {
      'Authorization': getAuthorizationHeader()
    }
  });
  if (response.status === 200) {
    let contentDisposition = response.headers.get("content-disposition");
    let filename = contentDisposition.split(';').find(n => n.includes('filename=')).replace('filename=', '').trim();
    return { blob: await response.blob(), fileName: filename };
  }
  else if (response.status === 401) {
    if (await refreshToken()) {
      return await getBlob(url);
    }
    else {
      throw new CoraError({
        UserMessage: UNAUTHORIZED_MSG,
        Code: '401.000'
      });
    }
  }
  else {
    const res = await response.json();
    throw new CoraError(res);
  }
}</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-Alert.html">Alert</a></li><li><a href="module-animation_Slide.html">animation/Slide</a></li><li><a href="module-buttons_Button.html">buttons/Button</a></li><li><a href="module-buttons_ButtonGroup.html">buttons/ButtonGroup</a></li><li><a href="module-buttons_DropDownButton.html">buttons/DropDownButton</a></li><li><a href="module-buttons_SplitButton.html">buttons/SplitButton</a></li><li><a href="module-ChangePassword.html">ChangePassword</a></li><li><a href="module-chart_ChartComponent.html">chart/ChartComponent</a></li><li><a href="module-chart_elements_ChartCategoryAxisComponent.html">chart/elements/ChartCategoryAxisComponent</a></li><li><a href="module-chart_elements_ChartLegendComponent.html">chart/elements/ChartLegendComponent</a></li><li><a href="module-chart_elements_ChartSeriesComponent.html">chart/elements/ChartSeriesComponent</a></li><li><a href="module-chart_elements_ChartTitleComponent.html">chart/elements/ChartTitleComponent</a></li><li><a href="module-Container.html">Container</a></li><li><a href="module-detail_Detail.html">detail/Detail</a></li><li><a href="module-detail_DetailWrapper.html">detail/DetailWrapper</a></li><li><a href="module-detail_Toolbar.html">detail/Toolbar</a></li><li><a href="module-detail_ValidationMessage.html">detail/ValidationMessage</a></li><li><a href="module-dialogs_ConfirmDialog.html">dialogs/ConfirmDialog</a></li><li><a href="module-dialogs_Dialog.html">dialogs/Dialog</a></li><li><a href="module-dialogs_DialogContent.html">dialogs/DialogContent</a></li><li><a href="module-dialogs_EmailPrompt.html">dialogs/EmailPrompt</a></li><li><a href="module-dialogs_FileContent.html">dialogs/FileContent</a></li><li><a href="module-dialogs_FileDialog.html">dialogs/FileDialog</a></li><li><a href="module-dialogs_ReportDialog.html">dialogs/ReportDialog</a></li><li><a href="module-Dropdown.html">Dropdown</a></li><li><a href="module-forms_Autocomplete.html">forms/Autocomplete</a></li><li><a href="module-forms_AutocompleteLocal.html">forms/AutocompleteLocal</a></li><li><a href="module-forms_Checkbox.html">forms/Checkbox</a></li><li><a href="module-forms_DatePicker.html">forms/DatePicker</a></li><li><a href="module-forms_DateRangePicker.html">forms/DateRangePicker</a></li><li><a href="module-forms_DateTimePicker.html">forms/DateTimePicker</a></li><li><a href="module-forms_DropDownList.html">forms/DropDownList</a></li><li><a href="module-forms_Input.html">forms/Input</a></li><li><a href="module-forms_MultiSelect.html">forms/MultiSelect</a></li><li><a href="module-forms_NumericTextBox.html">forms/NumericTextBox</a></li><li><a href="module-forms_Picker.html">forms/Picker</a></li><li><a href="module-forms_Switch.html">forms/Switch</a></li><li><a href="module-forms_Textarea.html">forms/Textarea</a></li><li><a href="module-forms_TimePicker.html">forms/TimePicker</a></li><li><a href="module-forms_Upload.html">forms/Upload</a></li><li><a href="module-graph_ArcGauage.html">graph/ArcGauage</a></li><li><a href="module-grid_Cell.html">grid/Cell</a></li><li><a href="module-grid_ColumnMenu.html">grid/ColumnMenu</a></li><li><a href="module-grid_DialogFilter.html">grid/DialogFilter</a></li><li><a href="module-grid_DialogFilterForm.html">grid/DialogFilterForm</a></li><li><a href="module-grid_DropdownFilterCell.html">grid/DropdownFilterCell</a></li><li><a href="module-grid_EditBooleanCell.html">grid/EditBooleanCell</a></li><li><a href="module-grid_EditCommandCell.html">grid/EditCommandCell</a></li><li><a href="module-grid_EditDateTimeCell.html">grid/EditDateTimeCell</a></li><li><a href="module-grid_EditDropdownCell.html">grid/EditDropdownCell</a></li><li><a href="module-grid_EditPickerCell.html">grid/EditPickerCell</a></li><li><a href="module-grid_EditTimeCell.html">grid/EditTimeCell</a></li><li><a href="module-grid_FileCell.html">grid/FileCell</a></li><li><a href="module-grid_Grid.html">grid/Grid</a></li><li><a href="module-grid_GridWrapper.html">grid/GridWrapper</a></li><li><a href="module-grid_RangeFilterCell.html">grid/RangeFilterCell</a></li><li><a href="module-grid_SaveFilterDialog.html">grid/SaveFilterDialog</a></li><li><a href="module-grid_SelectionMenu.html">grid/SelectionMenu</a></li><li><a href="module-grid_Toolbar.html">grid/Toolbar</a></li><li><a href="module-grid_TooltipCell.html">grid/TooltipCell</a></li><li><a href="module-LoadingPanel.html">LoadingPanel</a></li><li><a href="module-metabase_Dashboard.html">metabase/Dashboard</a></li><li><a href="module-navigation_Hamburger.html">navigation/Hamburger</a></li><li><a href="module-navigation_Manual.html">navigation/Manual</a></li><li><a href="module-navigation_ManualDialogList.html">navigation/ManualDialogList</a></li><li><a href="module-navigation_ManualList.html">navigation/ManualList</a></li><li><a href="module-navigation_ManualPDF.html">navigation/ManualPDF</a></li><li><a href="module-navigation_ManualWrapper.html">navigation/ManualWrapper</a></li><li><a href="module-navigation_Navigation.html">navigation/Navigation</a></li><li><a href="module-navigation_Search.html">navigation/Search</a></li><li><a href="module-navigation_User.html">navigation/User</a></li><li><a href="module-RefreshDialog.html">RefreshDialog</a></li><li><a href="module-sch_ApprovalProcessStep.html">sch/ApprovalProcessStep</a></li><li><a href="module-sch_ApprovalProcessTimeline.html">sch/ApprovalProcessTimeline</a></li><li><a href="module-scheduler_Scheduler.html">scheduler/Scheduler</a></li><li><a href="module-Settings.html">Settings</a></li><li><a href="module-sidebar_Appmenu.html">sidebar/Appmenu</a></li><li><a href="module-sidebar_Footer.html">sidebar/Footer</a></li><li><a href="module-sidebar_header_Appmenu.html">sidebar/header/Appmenu</a></li><li><a href="module-sidebar_header_Header.html">sidebar/header/Header</a></li><li><a href="module-sidebar_header_SidebarToggle.html">sidebar/header/SidebarToggle</a></li><li><a href="module-sidebar_menu_Menu.html">sidebar/menu/Menu</a></li><li><a href="module-sidebar_menu_Search.html">sidebar/menu/Search</a></li><li><a href="module-sidebar_Sidebar.html">sidebar/Sidebar</a></li><li><a href="module-sidebar_Stats.html">sidebar/Stats</a></li><li><a href="module-Tab.html">Tab</a></li><li><a href="module-Tabs.html">Tabs</a></li><li><a href="module-TabsWrapper.html">TabsWrapper</a></li><li><a href="module-TitlePanel.html">TitlePanel</a></li><li><a href="module-utils_convert.html">utils/convert</a></li><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter.html">utils/eventEmitter</a></li><li><a href="module-utils_flags.html">utils/flags</a></li><li><a href="module-utils_helper.html">utils/helper</a></li><li><a href="module-utils_logger.html">utils/logger</a></li><li><a href="module-utils_requests.html">utils/requests</a></li><li><a href="module-utils_storage.html">utils/storage</a></li><li><a href="module-ValidationAlert.html">ValidationAlert</a></li><li><a href="module-views_login_Login.html">views/login/Login</a></li><li><a href="module-views_registration_Registration.html">views/registration/Registration</a></li></ul><h3>Classes</h3><ul><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter-ExtendedEventEmitter.html">ExtendedEventEmitter</a></li></ul><h3>Global</h3><ul><li><a href="global.html#getPreprocessedMenuData-zkorenamenuvyrobinovudatovustrukturumenupouzitelnunavykreslenie">getPreprocessedMenuData - z korena menu vyrobi novu datovu strukturu menu pouzitelnu na vykreslenie</a></li><li><a href="global.html#isValidDateStr">isValidDateStr</a></li><li><a href="global.html#isValidEcv">isValidEcv</a></li><li><a href="global.html#isValidID">isValidID</a></li><li><a href="global.html#isValidMail">isValidMail</a></li><li><a href="global.html#isValidPasswordStrong">isValidPasswordStrong</a></li><li><a href="global.html#isValidPhone">isValidPhone</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.6</a> on Thu Jan 07 2021 13:35:30 GMT+0100 (GMT+01:00)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
