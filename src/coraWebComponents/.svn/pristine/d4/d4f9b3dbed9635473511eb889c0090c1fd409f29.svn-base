<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Source: utils/convert.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: utils/convert.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>import moment from 'moment';

/** @module utils/convert */

/**
 * Adds offset(time zone) to given date.
 * @function addOffset
 * @param {Date} date date without offset(time zone)
 * @returns {(Date | null)}
 */
export const addOffset = date => {
  if (!date) {
    return null;
  }

  const offset = date.getTimezoneOffset() * 60000;
  return new Date(date.getTime() - offset);
}

/**
 * Converts string to Date.
 * @function strToDate
 * @param {string} str date as string
 * @returns {(Date | null)}
 */
export const strToDate = str => {
  if (!str) {
    return null;
  }

  return new Date(str);
}

/**
 * Creates instance of date or update date with specified time.
 * @function strToTime
 * @param {Date | null} date date or null
 * @param {string} str time as string
 * @returns {Date}
 */
export const strToTime = (date, str) => {
  if (!date) {
    return new Date();
  }
  const time = str.split(':');
  return new Date(date.getFullYear(),
    date.getMonth(),
    date.getDate(),
    time[0],
    time[1]);
}

/**
 * Returns a string with a language sensitive representation of this date.
 * @function dateToStr
 * @param {Date | null} date date or null
 * @param {object | null} format null or object which specifies how given date is going to be formatted
 * @returns {string}
 */
export const dateToStr = (date, format) => {
  if (!date) {
    return '';
  }
  if (format) {
    return date.toLocaleString('sk-SK', format);
  } else {
    return date.toLocaleString('sk-SK');
  }
}

/**
 * Returns a string with a language sensitive representation of this date.
 * @function dataToLocaleStr
 * @param {Date | null} date date or null
 * @param {object | null} format null or object which specifies how given date is going to be formatted
 * @returns {string}
 */
export const dataToLocaleStr = (date, format) => {
  return dateToStr(date, format);
}

/**
 * Returns a string with a language sensitive representation of the date portion of this date. 
 * @function dataToLocaleDateStr
 * @param {Date | null} date date or null
 * @param {object | null} format null or object which specifies how given date is going to be formatted
 * @returns {string}
 */
export const dataToLocaleDateStr = (date, format) => {
  if (!date) {
    return '';
  }
  if (format) {
    return date.toLocaleDateString('sk-SK', format);
  } else {
    return date.toLocaleDateString('sk-SK');
  }
}

/**
 * Returns the time portion of a Date object as a string, using locale conventions.
 * @function dataToLocaleTimeStr
 * @param {Date | null} date date or null
 * @param {object | null} format null or object which specifies how given time is going to be formatted
 * @returns {string}
 */
export const dataToLocaleTimeStr = (date, format) => {
  if (!date) {
    return '';
  }
  if (format) {
    return date.toLocaleTimeString('sk-SK', format);
  } else {
    return date.toLocaleTimeString('sk-SK');
  }
}

/**
 * Returns date as formatted string, 
 * e.g., 2.6.2015(date) -> 02.06.2015 
 * @function dateToDateStr
 * @param {Date | null} date date or null
 * @returns {string}
 */export const dateToDateStr = date => {
  if (!date) {
    return '';
  }
  const year = date.getFullYear();
  const month = `${date.getMonth() + 1}`.padStart(2, 0);
  const day = `${date.getDate()}`.padStart(2, 0);
  return `${day}.${month}.${year}`;
}

/**
 * Returns date as formatted string, 
 * e.g., 2.6.2015(date) -> 02062015 
 * @function dateToDbStr
 * @param {Date | null} date date or null
 * @returns {string}
 */
export const dateToDbStr = date => {
  if (!date) {
    return '';
  }
  const year = date.getFullYear();
  const month = `${date.getMonth() + 1}`.padStart(2, 0);
  const day = `${date.getDate()}`.padStart(2, 0);
  return `${year}${month}${day}`;
}

/**
 * Returns date as formatted string, 
 * e.g., 2.6.2015(date) -> 02.06.2015 
 * @function dateToValidation
 * @param {Date | null} date date or null
 * @returns {string}
 */
export const dateToValidation = date => {
  if (!date) {
    return '';
  }
  const year = date.getFullYear();
  const month = `${date.getMonth() + 1}`.padStart(2, 0);
  const day = `${date.getDate()}`.padStart(2, 0);
  return `${day}.${month}.${year}`;
}

/**
 * Returns date time as formatted string, 
 * e.g., 8:33:5(date) -> 08:33:05 
 * @function dateToValidation
 * @param {Date | null} date date or null
 * @returns {string}
 */
export const dateToTimeStr = date => {
  if (!date) {
    return '';
  }
  const hours = `${date.getHours()}`.padStart(2, 0);
  const minutes = `${date.getMinutes()}`.padStart(2, 0);
  const seconds = `${date.getSeconds()}`.padStart(2, 0);
  return `${hours}:${minutes}:${seconds}`;
}

/**
 * Returns date as formatted string, 
 * e.g., 2017-05-21T00:00:00 -> 21.05.2017 
 * @function convertDate
 * @param {string | null} timestamp date as string or null
 * @returns {string}
 */
export const convertDate = (timestamp) => {
  if (!timestamp) {
    return '';
  }

  const datetime = timestamp.split('T');
  const date = datetime[0].split('-');

  return date[2] + '.' + date[1] + '.' + date[0];
}

/**
 * Returns date as formatted string, 
 * e.g., 2017-05-21T08:33:05 -> 21.05.2017 8:33
 * @function convertDateTime
 * @param {string | null} timestamp date as string or null
 * @returns {string}
 */
export const convertDateTime = (timestamp) => {
  if (!timestamp) {
    return '';
  }

  const datetime = timestamp.split('T');
  const date = datetime[0].split('-');
  const time = datetime[1].split(':');

  return date[2] + '.' + date[1] + '.' + date[0] + ' ' + time[0] + ':' + time[1];
}

/**
 * Returns number as formatted string
 * e.g., 5 -> 05
 * @function checkZero
 * @param {number} input number
 * @returns {string}
 */
const checkZero = (input) => {
  return input &lt; 10 ? '0' + input : input;
}

/**
 * Returns timestamp from date and time.
 * @function dateTimeToTimestamp
 * @param {Date} date date
 * @param {Date} time time
 * @returns {string}
 */
export const dateTimeToTimestamp = (date, time) => {
  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + 'T'
    + checkZero(time.getHours()) + ':' + checkZero(time.getMinutes());
}

/**
 * Returns timestamp from date.
 * @function dateToTimestamp
 * @param {Date | null} date date or null
 * @returns {string}
 */
export const dateToTimestamp = (date) => {
  if (!date) {
    return '';
  }

  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + 'T'
    + checkZero(date.getHours()) + ':' + checkZero(date.getMinutes()) + ':' + checkZero(date.getSeconds());
}


/**
 * Returns a new string without character ".
 * @function escape
 * @param {string} input input string
 * @returns {string}
 */
export const escape = (input) => {
  return input.replace(/"/g, '');
}

/**
 * Returns a timestamp from string.
 * @function strToTimestamp
 * @param {string} str date as string
 * @returns {string}
 */
export const strToTimestamp = (str) => {
  if (!str) {
    return '';
  }

  const date = moment(str, 'D.M.YYYY', true);
  return dateToTimestamp(date.toDate());
}

/**
 * Returns a datestamp from date.
 * @function dateToDatestamp
 * @param {Date} date date
 * @returns {string}
 */
export const dateToDatestamp = (date) => {
  if (!date) {
    return '';
  }

  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
}


/**
 * Returns a word with capitalized first letter.
 * @function toUpperCaseFirst
 * @param {string} word string input
 * @returns {string}
 */
export const toUpperCaseFirst = (word) => {
  let Txt = word ? word : '';
  Txt = Txt.substr(0, 1).toUpperCase() + Txt.substr(1);
  return Txt;
}

/**
 * Returns date with time set to zero.
 * e.g., 2017-05-21T08:33:05 -> Sun May 21 2017 00:00:00 GMT+0200 (Central European Summer Time)
 * @function dateTimeToDate
 * @param {Date} date date
 * @returns {Date}
 */
export const dateTimeToDate = (date) => {
  const d = new Date(date);
  d.setHours(0, 0, 0, 0);
  return d;
}

/**
 * Returns date from specified string input.
 * e.g., 170521 -> Sun May 21 2017 00:00:00 GMT+0200 (Central European Summer Time)
 * @function rcToDnar
 * @param {string} rc string input
 * @returns {Date}
 */
export const rcToDnar = (rc) => {
  if (!rc)
    return '';

  let year = rc.substr(0, 2);
  var d = new Date();
  let yearAkt = d.getFullYear();

  if (year > yearAkt - 2000)
    year = `19${year}`;
  else
    year = `20${year}`;

  let month = rc.substr(2, 2) - 1;
  if (month >= 50)
    month = month - 50;

  if (month >= 20)
    month = month - 20;

  let day = rc.substr(4, 2);
  var dNar = new Date(year, month, day);

  return dNar;
}</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-Alert.html">Alert</a></li><li><a href="module-animation_Slide.html">animation/Slide</a></li><li><a href="module-buttons_Button.html">buttons/Button</a></li><li><a href="module-buttons_ButtonGroup.html">buttons/ButtonGroup</a></li><li><a href="module-buttons_DropDownButton.html">buttons/DropDownButton</a></li><li><a href="module-buttons_SplitButton.html">buttons/SplitButton</a></li><li><a href="module-ChangePassword.html">ChangePassword</a></li><li><a href="module-chart_ChartComponent.html">chart/ChartComponent</a></li><li><a href="module-chart_elements_ChartCategoryAxisComponent.html">chart/elements/ChartCategoryAxisComponent</a></li><li><a href="module-chart_elements_ChartLegendComponent.html">chart/elements/ChartLegendComponent</a></li><li><a href="module-chart_elements_ChartSeriesComponent.html">chart/elements/ChartSeriesComponent</a></li><li><a href="module-chart_elements_ChartTitleComponent.html">chart/elements/ChartTitleComponent</a></li><li><a href="module-Container.html">Container</a></li><li><a href="module-detail_Detail.html">detail/Detail</a></li><li><a href="module-detail_DetailWrapper.html">detail/DetailWrapper</a></li><li><a href="module-detail_Toolbar.html">detail/Toolbar</a></li><li><a href="module-detail_ValidationMessage.html">detail/ValidationMessage</a></li><li><a href="module-dialogs_ConfirmDialog.html">dialogs/ConfirmDialog</a></li><li><a href="module-dialogs_Dialog.html">dialogs/Dialog</a></li><li><a href="module-dialogs_DialogContent.html">dialogs/DialogContent</a></li><li><a href="module-dialogs_EmailPrompt.html">dialogs/EmailPrompt</a></li><li><a href="module-dialogs_FileContent.html">dialogs/FileContent</a></li><li><a href="module-dialogs_FileDialog.html">dialogs/FileDialog</a></li><li><a href="module-dialogs_ReportDialog.html">dialogs/ReportDialog</a></li><li><a href="module-Dropdown.html">Dropdown</a></li><li><a href="module-forms_Autocomplete.html">forms/Autocomplete</a></li><li><a href="module-forms_AutocompleteLocal.html">forms/AutocompleteLocal</a></li><li><a href="module-forms_Checkbox.html">forms/Checkbox</a></li><li><a href="module-forms_DatePicker.html">forms/DatePicker</a></li><li><a href="module-forms_DateRangePicker.html">forms/DateRangePicker</a></li><li><a href="module-forms_DateTimePicker.html">forms/DateTimePicker</a></li><li><a href="module-forms_DropDownList.html">forms/DropDownList</a></li><li><a href="module-forms_Input.html">forms/Input</a></li><li><a href="module-forms_MultiSelect.html">forms/MultiSelect</a></li><li><a href="module-forms_NumericTextBox.html">forms/NumericTextBox</a></li><li><a href="module-forms_Picker.html">forms/Picker</a></li><li><a href="module-forms_Switch.html">forms/Switch</a></li><li><a href="module-forms_Textarea.html">forms/Textarea</a></li><li><a href="module-forms_TimePicker.html">forms/TimePicker</a></li><li><a href="module-forms_Upload.html">forms/Upload</a></li><li><a href="module-graph_ArcGauage.html">graph/ArcGauage</a></li><li><a href="module-grid_Cell.html">grid/Cell</a></li><li><a href="module-grid_ColumnMenu.html">grid/ColumnMenu</a></li><li><a href="module-grid_DialogFilter.html">grid/DialogFilter</a></li><li><a href="module-grid_DialogFilterForm.html">grid/DialogFilterForm</a></li><li><a href="module-grid_DropdownFilterCell.html">grid/DropdownFilterCell</a></li><li><a href="module-grid_EditBooleanCell.html">grid/EditBooleanCell</a></li><li><a href="module-grid_EditCommandCell.html">grid/EditCommandCell</a></li><li><a href="module-grid_EditDateTimeCell.html">grid/EditDateTimeCell</a></li><li><a href="module-grid_EditDropdownCell.html">grid/EditDropdownCell</a></li><li><a href="module-grid_EditPickerCell.html">grid/EditPickerCell</a></li><li><a href="module-grid_EditTimeCell.html">grid/EditTimeCell</a></li><li><a href="module-grid_FileCell.html">grid/FileCell</a></li><li><a href="module-grid_Grid.html">grid/Grid</a></li><li><a href="module-grid_GridWrapper.html">grid/GridWrapper</a></li><li><a href="module-grid_RangeFilterCell.html">grid/RangeFilterCell</a></li><li><a href="module-grid_SaveFilterDialog.html">grid/SaveFilterDialog</a></li><li><a href="module-grid_SelectionMenu.html">grid/SelectionMenu</a></li><li><a href="module-grid_Toolbar.html">grid/Toolbar</a></li><li><a href="module-grid_TooltipCell.html">grid/TooltipCell</a></li><li><a href="module-LoadingPanel.html">LoadingPanel</a></li><li><a href="module-metabase_Dashboard.html">metabase/Dashboard</a></li><li><a href="module-navigation_Hamburger.html">navigation/Hamburger</a></li><li><a href="module-navigation_Manual.html">navigation/Manual</a></li><li><a href="module-navigation_ManualDialogList.html">navigation/ManualDialogList</a></li><li><a href="module-navigation_ManualList.html">navigation/ManualList</a></li><li><a href="module-navigation_ManualPDF.html">navigation/ManualPDF</a></li><li><a href="module-navigation_ManualWrapper.html">navigation/ManualWrapper</a></li><li><a href="module-navigation_Navigation.html">navigation/Navigation</a></li><li><a href="module-navigation_Search.html">navigation/Search</a></li><li><a href="module-navigation_User.html">navigation/User</a></li><li><a href="module-RefreshDialog.html">RefreshDialog</a></li><li><a href="module-sch_ApprovalProcessStep.html">sch/ApprovalProcessStep</a></li><li><a href="module-sch_ApprovalProcessTimeline.html">sch/ApprovalProcessTimeline</a></li><li><a href="module-scheduler_Scheduler.html">scheduler/Scheduler</a></li><li><a href="module-Settings.html">Settings</a></li><li><a href="module-sidebar_Appmenu.html">sidebar/Appmenu</a></li><li><a href="module-sidebar_Footer.html">sidebar/Footer</a></li><li><a href="module-sidebar_header_Appmenu.html">sidebar/header/Appmenu</a></li><li><a href="module-sidebar_header_Header.html">sidebar/header/Header</a></li><li><a href="module-sidebar_header_SidebarToggle.html">sidebar/header/SidebarToggle</a></li><li><a href="module-sidebar_menu_Menu.html">sidebar/menu/Menu</a></li><li><a href="module-sidebar_menu_Search.html">sidebar/menu/Search</a></li><li><a href="module-sidebar_Sidebar.html">sidebar/Sidebar</a></li><li><a href="module-sidebar_Stats.html">sidebar/Stats</a></li><li><a href="module-Tab.html">Tab</a></li><li><a href="module-Tabs.html">Tabs</a></li><li><a href="module-TabsWrapper.html">TabsWrapper</a></li><li><a href="module-TitlePanel.html">TitlePanel</a></li><li><a href="module-utils_convert.html">utils/convert</a></li><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter.html">utils/eventEmitter</a></li><li><a href="module-utils_flags.html">utils/flags</a></li><li><a href="module-utils_helper.html">utils/helper</a></li><li><a href="module-utils_logger.html">utils/logger</a></li><li><a href="module-utils_requests.html">utils/requests</a></li><li><a href="module-utils_storage.html">utils/storage</a></li><li><a href="module-ValidationAlert.html">ValidationAlert</a></li><li><a href="module-views_login_Login.html">views/login/Login</a></li><li><a href="module-views_registration_Registration.html">views/registration/Registration</a></li></ul><h3>Classes</h3><ul><li><a href="module-utils_coraError.html">utils/coraError</a></li><li><a href="module-utils_eventEmitter-ExtendedEventEmitter.html">ExtendedEventEmitter</a></li></ul><h3>Global</h3><ul><li><a href="global.html#getPreprocessedMenuData-zkorenamenuvyrobinovudatovustrukturumenupouzitelnunavykreslenie">getPreprocessedMenuData - z korena menu vyrobi novu datovu strukturu menu pouzitelnu na vykreslenie</a></li><li><a href="global.html#isValidDateStr">isValidDateStr</a></li><li><a href="global.html#isValidEcv">isValidEcv</a></li><li><a href="global.html#isValidID">isValidID</a></li><li><a href="global.html#isValidMail">isValidMail</a></li><li><a href="global.html#isValidPasswordStrong">isValidPasswordStrong</a></li><li><a href="global.html#isValidPhone">isValidPhone</a></li></ul>
</nav>

<br class="clear">

<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.6</a> on Thu Jan 07 2021 13:35:30 GMT+0100 (GMT+01:00)
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
