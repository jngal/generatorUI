import React from 'react';
import PropTypes from 'prop-types';
import Button from '../buttons/Button';
import saveAs from 'file-saver';

class FileContent extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      src: null,
      data: null
    }
  }

  async init() {
    const { url, mimeType } = this.props;

    try {
      const data = await this.props.requests.getBlob(url);

      if (mimeType === 'image/jpeg' || mimeType === 'image/png') {
        const reader = new FileReader();
        reader.readAsDataURL(data);
        reader.onloadend = () => {
          this.setState({ src: reader.result, data });
        }
      }
      else if (mimeType === 'application/pdf') {
        this.setState({ src: URL.createObjectURL(data), data })
      }
      else {
        this.setState({ data });
      }
    }
    catch (error) {
      console.error(error)
    }
  }

  componentDidMount() {
    if(this.props.id) {
      this.init();
    }
  }

  componentDidUpdate(prevProps, prevState) {    
    if(this.props.id !== prevProps.id) {
      this.init();
    }
  }

  handleDownload = () => {
    saveAs(this.state.data, this.props.name);
  }

  buildPreview = () => {
    if(!this.state.src) {
      return null;
    }

    switch(this.props.mimeType) {
      case 'application/pdf':
        return (
          <iframe
            src={this.state.src + '#toolbar=0&navpanes=0'}
            width="100%"
            title={this.props.name}
          />
        );
      case 'image/jpeg':
      case 'image/png':
        return (
          <img
            width={300}
            src={this.state.src} 
            alt={this.props.name} 
          />
        );
      default:
        return (
          <div>nie je k dizpozicii</div>
        );
    }
  }

  render() {
    return (
      <div style={this.props.style}>
        {this.buildPreview()}        
        <Button
          label="StiahnuÅ¥"
          primary={true}
          icon="download"
          onClick={this.handleDownload}
          disabled={!this.state.src}
        />
      </div>
    );
  }
}

FileContent.propTypes = {
  requests: PropTypes.object,
  name: PropTypes.string.isRequired,
  url: PropTypes.string.isRequired,
  mimeType: PropTypes.string.isRequired,
  id: PropTypes.number.isRequired,
  style: PropTypes.object
}

export default FileContent;