import './Input.scss';

import { Input } from '@progress/kendo-react-inputs';
import Button from '../buttons/Button';
import PropTypes from 'prop-types';
import React from 'react';

class InputComponent extends React.Component {

  onBlur = () => {
    if (this.props.onBlur) {
      this.props.onBlur();
    }
  }

  handleCopy = () => {
    navigator.clipboard.writeText(this.props.value);
  }

  render() {
    return (
      <React.Fragment>
        <Input
          className={`input ${this.props.disabled ? 'disabled-field' : ''} `}
          validationMessage={this.props.validationMessage || 'Povinné'}
          required={this.props.required}
          onChange={(e) => this.props.onChange(this.props.name, e.target.value)}
          value={this.props.value !== null ? this.props.value : ''}
          disabled={this.props.disabled}
          type={this.props.type}
          placeholder={this.props.placeholder}
          onClick={this.props.onClick}
          autoFocus={this.props.autofocus}
          minLength={this.props.minLength}
          maxLength={this.props.maxLength}
          pattern={this.props.pattern}
          tabIndex={this.props.tabIndex}
          onBlur={this.onBlur}
        />
        {this.props.copyable && this.props.value &&
          <div className="copyable">
            <Button
              className="copyable-button"
              primary={true}
              icon="copy"
              onClick={this.handleCopy}
              disabled={false}
              title="Kopírovať text"
            />
          </div>
        }
      </React.Fragment>
    );
  }
}

InputComponent.propTypes = {
  validationMessage: PropTypes.string,
  name: PropTypes.string.isRequired,
  required: PropTypes.bool,
  onChange: PropTypes.func.isRequired,
  value: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
  ]),
  disabled: PropTypes.bool,
  type: PropTypes.string,
  placeholder: PropTypes.string,
  onClick: PropTypes.func,
  autofocus: PropTypes.bool,
  minLength: PropTypes.number,
  maxLength: PropTypes.number,
  pattern: PropTypes.string,
  tabIndex: PropTypes.number,
  isPicker: PropTypes.bool,
  onBlur: PropTypes.func
}

export default InputComponent;