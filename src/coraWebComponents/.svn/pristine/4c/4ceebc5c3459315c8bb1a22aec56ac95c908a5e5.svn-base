import * as React from 'react';
import PropTypes from 'prop-types';
import Input from '../../forms/Input';
import Button from '../../buttons/Button';
import LoadingPanel from '../../LoadingPanel';
import { getClientVersion } from '../../utils/helper';
import './Registration.scss';

/**
 * Registration component
 * @module
 * @param {array} additionalElements - Additional elements
 * @param {string} [emailLabel] - Email label, "Email" if not provided
 * @param {element} header - Header element
 * @param {bool} isLoading - Is loading?
 * @param {string} [loginLabel] - Login label, "Prihlásenie" if not provided
 * @param {string} [loginPath] - Login path, empty if not provided
 * @param {string} [passwordLabel] - Password label, "Heslo" if not provided
 * @param {bool} [showLoginLabel] - Should login table show?
 * @param {string} [verifyPasswordLabel] - Verify password label, "Overenie hesla" if not provided
 * @param {string} [userNameLabel] - User name label, "Prihlasovacie meno" if not provided
 */
class Registration extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      username: "",
      email: "",
      password:"",
      verifyPassword: ""
    };
  }

  handleChange = (name, value) => {
    this.setState({ [name]: value });
  };

  handleSubmit = async (event) => {
    event.preventDefault();
    this.props.onSubmit(this.state);
  }

  render() {
    const { 
      email, 
      username, 
      password, 
      verifyPassword
    } = this.state;

    const { 
      emailValue,
      header,
      userNameLabel,
      showUsernameInput,
      emailLabel,
      passwordLabel,
      verifyPasswordLabel,
      additionalElements,
      showLoginLabel,
      loginPath,
      loginLabel,
      isLoading,
      disabled
     } = this.props;
    
    if (emailValue && (emailValue !== email))
      this.setState({ email: emailValue });

    return (
      <div className="row m-0">
        <div className="col-4 offset-4 p-0">
          <div className="card registration">
            <div className="card-body">
              <div className="card-title">
                <div>
                  {header}
                </div>
                <div style={{float: 'right', fontSize: 12, paddingRight: 16}}>
                  {getClientVersion()}
                </div>
              </div>
              <form className="k-form" onSubmit={this.handleSubmit}>

                {/* Default elements */}
                {showUsernameInput && 
                  <div className="k-form-field">
                    <span>{userNameLabel || "Prihlasovacie meno"}</span>
                    <Input
                      name="username"
                      onChange={this.handleChange}
                      value={username}
                      disabled={disabled && disabled.username}
                    />
                  </div>
                }
                <div className="k-form-field">
                  <span>{`*${emailLabel || "Email"}`}</span>
                  <Input
                    type="email"
                    name="email"
                    required={true}
                    onChange={this.handleChange}
                    value={email}
                    disabled={disabled && disabled.email}
                    validationMessage="Nesprávny format mailovej adresy!"
                  />
                </div>
                <div className="k-form-field">
                  <span>{`*${passwordLabel || "Heslo"}`}</span>
                  <Input
                    type="password"
                    name="password"
                    required={true}
                    onChange={this.handleChange}
                    value={password}
                    disabled={disabled && disabled.password}
                    pattern="(?=.*[a-zA-Z].*)(?=.*[0-9].*)^[a-zA-Z0-9+*/-]{6,}"
                    validationMessage="Heslo musí mať aspoň 6 znakov a musí obsahovat písmená a číslice!"
                  />
                </div>
                <div className="k-form-field">
                  <span>{`*${verifyPasswordLabel || "Overenie hesla"}`}</span>
                  <Input
                    type="password"
                    name="verifyPassword"
                    required={true}
                    onChange={this.handleChange}
                    value={verifyPassword}
                    disabled={disabled && disabled.password}
                    validationMessage="Hesla sa nezhodujú"
                    valid={password === verifyPassword}
                  />
                </div>
                
                {/* Render additonal elements */}
                {additionalElements &&
                  additionalElements.map(e => e)
                }

                {/* Register button with Login hyperLink */}
                <div className="k-form-field">
                  <div className="footerContainer">
                    {showLoginLabel &&
                      <a className="login" href={`#${loginPath || ''}`}>
                        {loginLabel || "Prihlásenie"}
                      </a>
                    }
                    <Button
                      primary={true}
                      disabled={isLoading}
                      label="Registrovať"
                      type="submit"
                    />
                  </div>
                </div>
              </form>

              <LoadingPanel isLoading={isLoading} />
            </div>
          </div>
        </div>
      </div>
    );
  }
}

Registration.propTypes = {
  additionalElements: PropTypes.arrayOf(PropTypes.element),
  onChange: PropTypes.func.isRequired,
  emailLabel: PropTypes.string,
  emailValue: PropTypes.string,
  header: PropTypes.element.isRequired,
  isLoading: PropTypes.bool.isRequired,
  loginLabel: PropTypes.string,
  loginPath: PropTypes.string,
  passwordLabel: PropTypes.string,
  showLoginLabel: PropTypes.bool,
  showUsernameInput: PropTypes.bool,
  onSubmit: PropTypes.func.isRequired,
  verifyPasswordLabel: PropTypes.string,
  userNameLabel: PropTypes.string,
  disabled: PropTypes.object,
}

export default Registration;