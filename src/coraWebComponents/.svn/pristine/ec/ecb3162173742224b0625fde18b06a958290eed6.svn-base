import React from 'react';
import PropTypes from 'prop-types';

import Button from '../buttons/Button';
import LoadingPanel from '../LoadingPanel';
import { EditItem } from './SchedulerEditItem';
import SchedulerViewSlot from './SchedulerViewSlot';
import { buildUrl } from '../utils/helper';
import { IntlProvider, load, LocalizationProvider, loadMessages } from '@progress/kendo-react-intl';
import { Scheduler, TimelineView, DayView, WeekView, MonthView, AgendaView } from '@progress/kendo-react-scheduler';

import weekData from 'cldr-core/supplemental/weekData.json';
import currencyData from 'cldr-core/supplemental/currencyData.json';
import likelySubtags from 'cldr-core/supplemental/likelySubtags.json';

import numbers from 'cldr-data/main/sk/numbers.json';
import currencies from 'cldr-data/main/sk/currencies.json';
import caGregorian from 'cldr-data/main/sk/ca-gregorian.json';
import dateFields from 'cldr-data/main/sk/dateFields.json';
import { timezoneNames } from '@progress/kendo-date-math';

import './Scheduler.scss';

import '@progress/kendo-date-math/tz/regions/Europe';
import '@progress/kendo-date-math/tz/Europe/Bratislava';
import '@progress/kendo-date-math/tz/Etc/UTC';

import skMessages from '../res/sk.json';

load(
  likelySubtags, currencyData, weekData, numbers,
  currencies, caGregorian, dateFields, timezoneNames
);
loadMessages(skMessages, 'sk-SK');

class SchedulerComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      view: 'week',
      date: this.props.date,
      locale: { language: 'sk-SK', locale: 'sk' },
      timezone: "Europe/Bratislava",
      orientation: 'vertical',
      data: [],
    };

    this.EditItem = EditItem({
      onEditClick: this.handleEditItemClick,
      onDeleteClick: this.handleDeleteItemClick,
      getScrollOffset: this.getScrollOffset
    });

    this.ref = React.createRef();
  }

  handleEditItemClick = (event) => {
    
    this.props.onEdit(event.target.props.dataItem.TaskID);
  }

  handleDeleteItemClick = (event) => {
    this.props.onDelete([event.target.props.dataItem]);
  }

  getScrollOffset = () => {
    return this.ref.current && this.ref.current.element && this.ref.current.element.children && this.ref.current.element.children[1].scrollTop;
  }

  handleViewChange = (value) => {
    if (this.props.onViewChange) {
      this.props.onViewChange(value.value);
    }
    else {
      this.handleChange('view', value.value);
    }
  }

  handleChange = (name, value) => {
    this.setState((state) => {
      return {
        [name]: value
      }
    });
  }

  recalcDay = (date) => {
    const month = this.props.date.getMonth();
    let newdate = new Date(this.props.date);
    return date.getTime() > this.props.date.getTime() ? new Date(newdate.setMonth(month + 2,0)) : new Date(this.props.date.setMonth(month,0));
  }

  onDateChange = (value) => {
    let _new = new Date(new Date(value).setHours(0, 0, 0));
    if(!(value instanceof Date)){
        _new = new Date(new Date(value._localDate).setHours(0, 0, 0));
    }
    let _old = new Date(new Date(this.props.date).setHours(0, 0, 0));
    const dateDiff = Math.abs((_old.getTime() - _new.getTime()) / (24 * 60 * 60 * 1000));
    const newDate = dateDiff === 31 ? this.recalcDay(_new) : _new;
    this.props.onDateChange(newDate);
  }

  render() {
    const handleDataChange = ({ created, updated, deleted }) => {
      this.props.onUpdate(updated);
      this.props.onDelete(deleted);
    }

    const { locale, view, timezone } = this.state;
    return (
      <div className="k-scheduler-overlay">
        <div className="k-scheduler-toolbar">
          <div className="k-scheduler-toolbar-buttons">
            <div className="k-scheduler-toolbar-buttons-left">
              <Button
                onClick={(event) => this.props.onAdd(event)}
                title="Nová udalosť"
                icon="novy-zaznam"
                imageUrl={buildUrl('assets/toolbar_cg_new.svg')}
              />
              {typeof this.props.toolbarActions === 'function' ? this.props.toolbarActions() : this.props.toolbarActions}
            </div>
            <div className="k-scheduler-toolbar-buttons-right">
              <Button
                onClick={(event) => this.props.onRefresh(event)}
                icon="refresh"
                title="Obnovenie"
                imageUrl={buildUrl('assets/toolbar_cg_refresh.svg')}
              />
              {this.props.onExport && <Button
                onClick={(event) => this.props.onExport(event)}
                icon="export"
                title="Exportovať .ics"
                imageUrl={buildUrl('assets/toolbar_cg_export.svg')}
              />}
            </div>
          </div>
        </div>
        <LocalizationProvider language={locale.language}>
          <IntlProvider locale={locale.locale} >
            <Scheduler
              data={this.props.data}
              ref={this.props.setRef || this.ref}
              onDataChange={handleDataChange}
              view={this.props.view ? this.props.view : view}
              onViewChange={this.handleViewChange}
              date={this.props.date}
              onDateChange={e => this.onDateChange(e.value)}
              editable={this.props.editable}
              timezone={timezone}
              modelFields={this.props.modelFields}
              resources={this.props.resources}
              group={this.props.group}
              editItem={this.props.editItem || this.EditItem}
              height={""}
              viewSlot={this.props.viewSlot || SchedulerViewSlot}
            >
              <TimelineView />
              <DayView
                slotDuration={120}
                slotDivisions={4}
                workDayStart={"06:00"}
                workDayEnd={"20:00"}
              />
              <WeekView
                slotDuration={120}
                slotDivisions={2}
                workDayStart={"06:00"}
                workDayEnd={"20:00"}
              />
              <MonthView />
              <AgendaView />
            </Scheduler>
          </IntlProvider>
        </LocalizationProvider>
        <LoadingPanel isLoading={this.props.isLoading} />
      </div>
    )
  }
}

SchedulerComponent.propTypes = {
  isLoading: PropTypes.bool.isRequired,
  date: PropTypes.instanceOf(Date),
  editable: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
  data: PropTypes.array.isRequired,
  onDataChange: PropTypes.func,
  onDateChange: PropTypes.func.isRequired,
  onUpdate: PropTypes.func.isRequired,
  onDelete: PropTypes.func,
  onAdd: PropTypes.func.isRequired,
  onEdit: PropTypes.func.isRequired,
  onRefresh: PropTypes.func.isRequired,
  onExport: PropTypes.func,
  resources: PropTypes.arrayOf(PropTypes.object),
  orientation: PropTypes.string,
  modelFields: PropTypes.object,
  editItem: PropTypes.func,
  viewSlot: PropTypes.func,
}

export default SchedulerComponent;
